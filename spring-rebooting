1. Spring의 기본 기능
  
  v. java-EE 가 했었는데, spring이 이를 단순하게 정리 했다.
  
  dependency injection,( v )
  transaction management, ( v )
  web apps,
  data access,
  messaging

그래서 

< 웹 개발 >
> Spring ( <- Java EE 를 대체 )
> Java SE ( API, 파일, 콘소르 윈둥 )

1. MVC  <- DI <- 느슨한 결합력과 인터페이스
2. 트랜잭션 <- AOP 
3. 인증과 권한 <- Servlet Filter


---------------
약결합 
UI - Service - Data access object - DB

1. 새로운 Dao로 바꾸기 위해서는 Service도 같이 배포를 해야한다.
ex) 인터페이스 사용후, 설정파일로 생성 


----------------
DI, IoC Container


A가 B를 사용하는것은 
 = Composition, 일체형 관계, 부품, dependency, b = new B(),   큰단위에서 작은 다위가 생성됨
 = Association, 조립형, setB() -> 작은 단위 부터 큰단위로 감
 
 
 B b = new B(); <- dependcy
 A a = new A();
 
 a.setB(b) <- injection
 
 1. 장점: 부품을 쉽게 만들 수 있다.
 2. 단점: 갈아 끼워야 한다. 조립하기 귀찮
      갈아끼우는 방법은 , constrcutor를 통해 or Setter를 통해 가능하다
      조립을 해주는 녀석을 이용한다. - spring이 조립을 해준다.
      
----------------
ioc 컨테이너
      
   주문서에 입력대로 만들어서 조립하는것 Container, 부품 컨테이너
   작은 부품을 만들고 큰 부품을 만드고 조립 = 역순 ( inversion of control ) 
   
   
----------------

* spring @Bean

그럼 지시서를 어떻게 만드는게 좋은것인가? 
------------

ApplicationContext = config 혹은 조립서를 읽어서 객체화 해서 담고 있는 그릇 ( IoC container) 
Classpath: application의 Root부터 찾음 
      
----------
<Setter를 통해 설정>
Configuration property , xml에서 setter통해 입력을 받았던것을 java annotation으로 변환 했다.
<Construct를 통해 설정> 
      
----------
@Autowired
 (Annotation 과 코드를 같이 하기로함)
코드에 아예 메타이터들을 하기로
객채 생성할때 @Autowire들을 확인해서 객체를 참조해줘라 라는게 필요함, 
<annotation-config> -> 객체에 annotation이 있다는걸 알려줌

-----------
@Qualifier

@Autowire을 할때 어떤걸 기준으로 참조하게 만드나
1. 자료형? ( v ) 객체를 참조할 수 있는것을 사용하게 된다. 2개면 :
2. 그다음은 이름을 찾느다.

@Qualifier - 설정과 객체가 이름이 다를떄 => 이름을 가지고 찾아라 

-----------
@Autowired 위치

1. setter위치
  - setter method를 호출하면서 세팅
2. constructor위치
  - qulifier 는 생성자에서 할시에 여러개가 올수 있으니, param에 지정하다.
3. Field 위치 ( 이게 새로운 것 )
    - 기본생성자를 호출하면서 세팅된다
    
    
-----------
어노테이션을 이용한 객체 생성

@Component
종류와 시멘틱

@Value 기본 값 설정을 위한 어노테이션

@Component -> Controller, service, repository 

------------
@Configuration 자바 configuration

@Configuration
@ConponentScan("..")

refresth() - 설정된 내용을 다시 읽어줌


--------------
AOP 방법론

Aspect oriented Programming 

개발자, 운영자, 사용자의 관점에 따라서 나누어서 한다
지금까지 객체지향은 사용자 관점에 따라서 개발했다.


Primary(core) Concern과 Cross-Cutting concern

주 업무 외

로그 처리
보안처리
트랜잭션 처리

흐름 -> Cross-Cutting Conern -> 이에가 Core Conern을 호출

```java
public class Exam implements Exam {
   
   // 추가

   int result = math + eng;
   
   // 추가 
   
   return result;
}

Exam proxy = Proxy.newProxyInstance(
  NewExam.class.getClassLoder()
  new Class[] {Exam.class}, new Instance(){
      xxxx
  }
)

```
코드의 수정없이 proxy를 spring의 Di로 해결

